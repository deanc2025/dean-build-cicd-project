on:
  pull_request:
    branches:
      - main  # Specify the branch you want to monitor
    paths:
      - starter/frontend/** 
  workflow_dispatch:
  
jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-${{ runner.os }}-

      - name: Install Dependencies
        run: cd starter/frontend && npm ci
        
      - name: Run Linter
        run: cd starter/frontend && npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-${{ runner.os }}-

      - name: Install Dependencies
        run: cd starter/frontend && npm ci

      - name: Run Tests
        run: cd starter/frontend && npm run test
        
  build:
    name: Build Application
    runs-on: ubuntu-latest
    environment: PROD
    needs: [test, lint]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-${{ runner.os }}-

      - name: Install Dependencies
        run: cd starter/frontend && npm ci

      - name: Run Tests
        run: cd starter/frontend && npm run test

      - name: Build Docker Image
        run: cd starter/frontend && docker build --build-arg REACT_APP_MOVIE_API_URL=${{ env.REACT_APP_MOVIE_API_URL }} -t mp-frontend:${{ github.sha }} .

      - name:  Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
          # aws-session_token: ${{ secrets.AWS_SESSION_TOKEN }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}

      - name: Push Image to ECR
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: latest
        run: |
          cd starter/frontend
          docker tag "mp-frontend:${{ github.sha }}" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:${{ github.sha }}"
          docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:${{ github.sha }}"
       
      - name: Configure Kubectl Action
        uses: azure/setup-kubectl@v1
        with:
          version: latest
          #kubectl-version: 'v1.24.0'

      - name: Configure EKS cluster
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Apply Image into EKS
        run: |
          cd starter/frontend
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
