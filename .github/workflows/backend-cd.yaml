
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  EXPECTED_OUTPUT : '{"movies":[{"id":"123","title":"Top Gun: Maverick"},{"id":"456","title":"Sonic the Hedgehog"},{"id":"789","title":"A Quiet Place"}]}'
          
jobs:
  lint:
    name: Lint Backend Python Code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/backend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install pipenv
        run: |
          pip install pipenv  # Install pipenv
      
      - name: Install System Dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential python3-dev libpcre3 libpcre3-dev
      
      - name: Install Pipenv Dependencies
        run: pipenv --python 3.11 install --dev

      - name: Run Lint (flake8)
        run: pipenv run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/backend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install pipenv
        run: |
          pip install pipenv  # Install pipenv

      - name: Install System Dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential python3-dev libpcre3 libpcre3-dev
          
      - name: Install Pipenv Dependencies
        run: pipenv --python 3.11 install --dev

      - name: Run Tests
        run: pipenv run test

  build:

    name: Build Backend Image
    runs-on: ubuntu-latest
    environment: PROD
    needs: [test, lint]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: cd starter/backend && docker build -t mp-backend:${{ github.sha }} .

      - name: Run The Docker Image
        run: cd starter/backend && docker run -p 5000:5000 --name mp-backend -d mp-backend:${{ github.sha }}
    
      - name: Check Running App
        run: | 
          CURL_RESPONSE=$(curl http://localhost:5000/movies)
          if [[ "$CURL_RESPONSE" == "$EXPECTED_OUTPUT" ]]; then 
            echo "Application Output Verified Sucessfully"
          else
            echo "Application unhealthy: expecting $EXPECTED_OUTPUT but recieved $CURL_RESPONSE"
            exit 1
          fi
          
      - name: Review The Logs
        run: docker logs mp-backend | tail -n 37

      - name: Stop and Delete Docker Container and Delete Image
        run: |
          docker stop mp-backend || true
          docker rm mp-backend || true
          # docker rmi mp-backend:${{ github.sha }} || true
          
      - name:  Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with: 
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}

      - name: Push Image to ECR
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_BE_REPO_NAME: ${{ secrets.ECR_BE_REPO_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          docker tag "mp-backend:${{ github.sha }}" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_BE_REPO_NAME:${{ github.sha }}"
          docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_BE_REPO_NAME:${{ github.sha }}"

      - name: Configure Kubectl Action
        uses: azure/setup-kubectl@v1
        with:
          version: latest
          #kubectl-version: 'v1.24.0'

      - name: Configure EKS cluster
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Apply Image into EKS
        run: |
          cd starter/backend
          sed -i "s|LATEST_IMAGE|${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_BE_REPO_NAME }}:${{ github.sha }}|g" k8s/deployment.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
