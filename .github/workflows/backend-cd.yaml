
on:
  pull_request:
    paths:
      - "starter/backend/**"
  workflow_dispatch:

env:
  EXPECTED_OUTPUT : '{"movies":[{"id":"123","title":"Top Gun: Maverick"},{"id":"456","title":"Sonic the Hedgehog"},{"id":"789","title":"A Quiet Place"}]}'
          
jobs:
  lint:
    name: Lint Backend Python Code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/backend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install pipenv
        run: |
          pip install pipenv  # Install pipenv
      
      - name: Install System Dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential python3-dev libpcre3 libpcre3-dev
      
      - name: Install Pipenv Dependencies
        run: pipenv --python 3.11 install --dev

      - name: Run Lint (flake8)
        run: pipenv run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: starter/backend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install pipenv
        run: |
          pip install pipenv  # Install pipenv

      - name: Install System Dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential python3-dev libpcre3 libpcre3-dev
          
      - name: Install Pipenv Dependencies
        run: pipenv --python 3.11 install --dev

      - name: Run Tests
        run: pipenv run test

  build:

    name: Build Backend Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: cd starter/backend && docker build -t mp-backend:latest .

      - name: Run The Docker Image
        run: cd starter/backend && docker run -p 5000:5000 --name mp-backend -d mp-backend
    
      - name: Check Running App
        run: | 
          CURL_RESPONSE=$(curl http://localhost:5000/movies)
          if [[ "$CURL_RESPONSE" == "$EXPECTED_OUTPUT" ]]; then 
            echo "Application Output Verified Sucessfully"
          else
            echo "Application unhealthy: expecting $EXPECTED_OUTPUT but recieved $CURL_RESPONSE"
            exit 1
          fi
          
      - name: Review The Logs
        run: docker logs mp-backend | tail -n 37

      - name: Stop and Delete Docker Container and Delete Image
        run: |
          docker stop mp-backend || true
          docker rm mp-backend || true
          docker rmi mp-backend:latest || true
